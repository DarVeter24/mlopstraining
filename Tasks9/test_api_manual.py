#!/usr/bin/env python3
"""
–†—É—á–Ω–æ–π —Ç–µ—Å—Ç REST API –¥–ª—è fraud detection
"""
import time
import requests
import json
from datetime import datetime

print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FRAUD DETECTION REST API")
print("=" * 45)

# –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
print("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
print("1. –í –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: cd /data/Projects_backup/MLOps-traning/task-for-exam/mlopstraining/Tasks9")
print("2. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ venv: source venv/bin/activate")  
print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ API: python -m src.api")
print("4. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è 'üéØ Fraud Detection API is ready!'")
print("5. –ù–∞–∂–º–∏—Ç–µ Enter –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
input()

API_BASE_URL = "http://localhost:8000"

def test_health_endpoint():
    """–¢–µ—Å—Ç health check —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º /health —ç–Ω–¥–ø–æ–∏–Ω—Ç...")
    try:
        response = requests.get(f"{API_BASE_URL}/health")
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Health Check Response:")
            print(json.dumps(data, indent=2))
            return True
        else:
            print(f"‚ùå Health check failed: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
        return False

def test_predict_endpoint():
    """–¢–µ—Å—Ç predict —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º /predict —ç–Ω–¥–ø–æ–∏–Ω—Ç...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è)
    test_transaction_normal = {
        "transaction_id": "test_tx_001",
        "customer_id": 1001,
        "terminal_id": 2001,
        "tx_amount": 100.50,
        "tx_time_seconds": int(time.time()),
        "tx_time_days": (datetime.utcnow() - datetime(1970, 1, 1)).days,
        "tx_fraud_scenario": 0
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è)
    test_transaction_fraud = {
        "transaction_id": "test_tx_002",
        "customer_id": 1002,
        "terminal_id": 2002,
        "tx_amount": 2500.00,
        "tx_time_seconds": int(time.time()),
        "tx_time_days": (datetime.utcnow() - datetime(1970, 1, 1)).days,
        "tx_fraud_scenario": 1
    }
    
    # –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    print("\nüìä –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è")
    print(f"Input: {test_transaction_normal}")
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/predict",
            json=test_transaction_normal,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Prediction Response:")
            print(json.dumps(data, indent=2))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if data["is_fraud"]:
                print("üö® –†–µ–∑—É–ª—å—Ç–∞—Ç: FRAUD")
            else:
                print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: NORMAL")
        else:
            print(f"‚ùå Prediction failed: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Prediction error: {e}")
        return False
    
    # –¢–µ—Å—Ç 2: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    print("\nüìä –¢–µ—Å—Ç 2: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è")
    print(f"Input: {test_transaction_fraud}")
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/predict",
            json=test_transaction_fraud,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Prediction Response:")
            print(json.dumps(data, indent=2))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if data["is_fraud"]:
                print("üö® –†–µ–∑—É–ª—å—Ç–∞—Ç: FRAUD")
            else:
                print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: NORMAL")
        else:
            print(f"‚ùå Prediction failed: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Prediction error: {e}")
        return False
    
    return True

def test_root_endpoint():
    """–¢–µ—Å—Ç root —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º / (root) —ç–Ω–¥–ø–æ–∏–Ω—Ç...")
    try:
        response = requests.get(f"{API_BASE_URL}/")
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Root Response:")
            print(json.dumps(data, indent=2))
            return True
        else:
            print(f"‚ùå Root endpoint failed: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Root endpoint error: {e}")
        return False

def test_docs_endpoint():
    """–¢–µ—Å—Ç docs —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º /docs —ç–Ω–¥–ø–æ–∏–Ω—Ç...")
    try:
        response = requests.get(f"{API_BASE_URL}/docs")
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ OpenAPI docs –¥–æ—Å—Ç—É–ø–Ω—ã")
            print(f"üìñ Swagger UI: {API_BASE_URL}/docs")
            return True
        else:
            print(f"‚ùå Docs endpoint failed: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Docs endpoint error: {e}")
        return False

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if __name__ == "__main__":
    success_count = 0
    total_tests = 4
    
    print("\nüöÄ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    if test_health_endpoint():
        success_count += 1
    
    if test_root_endpoint():
        success_count += 1
    
    if test_docs_endpoint():
        success_count += 1
    
    if test_predict_endpoint():
        success_count += 1
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 45)
    print(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {success_count}/{total_tests}")
    
    if success_count == total_tests:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üéâ REST API –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–ê–ï–¢!")
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
        print(f"   ‚Ä¢ GET  {API_BASE_URL}/        - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API")
        print(f"   ‚Ä¢ GET  {API_BASE_URL}/health  - Health check")
        print(f"   ‚Ä¢ POST {API_BASE_URL}/predict - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ fraud")
        print(f"   ‚Ä¢ GET  {API_BASE_URL}/docs    - OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
        print("\nüöÄ –ò–¢–ï–†–ê–¶–ò–Ø 2 –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
    else:
        print(f"‚ùå {total_tests - success_count} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")

