---
alwaysApply: true
---

# Правила разработки MLOps сервиса

## Стиль кода
- Используй **говорящие имена** функций и переменных
- Добавляй **краткие комментарии** для неочевидных решений  
- Следуй стилю **PEP 8** для Python кода
- Пиши **асинхронный код** с использованием `async/await` для FastAPI

## Структура проекта
- Размещай код согласно структуре из [@vision.md](./vision.md)
- Не создавай дополнительные директории без необходимости
- Используй относительные импорты внутри проекта
- Группируй связанные функции в отдельные модули

## Работа с зависимостями
- Используй только перечисленные в [@vision.md](./vision.md) технологии
- Добавляй зависимости в `requirements.txt` для управления пакетами
- Избегай сторонних библиотек, если функциональность можно реализовать стандартными средствами
- Фиксируй версии критически важных зависимостей

## Обработка ошибок
- Используй простую обработку исключений без сложной иерархии
- Логируй ошибки с достаточной информацией для отладки
- Обрабатывай ошибки MLflow и сетевые ошибки при загрузке модели
- Возвращай понятные HTTP статус коды в API

## Конфигурация
- Все настройки должны загружаться из `.env` файла
- Не хардкодь MLflow URI, S3 ключи и другие чувствительные данные
- Используй значения по умолчанию для необязательных параметров
- Валидируй конфигурацию при старте приложения

## Работа с ML моделью
- Следуй подходу к работе с моделью из [@vision.md](./vision.md)
- Загружай модель один раз при старте сервиса
- Кэшируй модель в памяти для быстрого inference
- Обрабатывай ошибки загрузки и предсказания модели
- Валидируй входные данные перед передачей в модель

## REST API
- Используй Pydantic модели для валидации данных
- Возвращай структурированные JSON ответы
- Добавляй HTTP status codes для разных сценариев
- Включай подробные описания в docstrings для автогенерации документации

## Тестирование
- Пиши тесты для критически важных функций
- Используй `pytest` для тестирования
- Мокай MLflow и внешние зависимости в тестах
- Тестируй API эндпоинты с помощью `httpx.AsyncClient`
- Создавай отдельные тесты для предобработки данных и предсказаний

## Docker и контейнеризация
- Используй multi-stage builds для оптимизации размера образа
- Не включай `.env` файлы в Docker образ
- Запускай приложение от непривилегированного пользователя
- Оптимизируй слои Docker для лучшего кэширования

## Kubernetes
- Используй ConfigMaps для конфигурации
- Настрой health checks (liveness и readiness probes)
- Определи resource limits и requests
- Используй namespace для изоляции ресурсов