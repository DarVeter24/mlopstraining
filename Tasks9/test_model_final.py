#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –†–ê–ë–û–ß–ò–ô –¢–ï–°–¢ –ú–û–î–ï–õ–ò
"""

import pandas as pd
import time
from datetime import datetime

print("üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ê–ë–û–ß–ò–ô –¢–ï–°–¢ –ú–û–î–ï–õ–ò")
print("=" * 45)

try:
    from src.model_loader import model_loader
    
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –∫—ç—à–∞...")
    model = model_loader.load_model()
    print(f"‚úÖ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ß–ò–°–õ–û–í–´–ú–ò ID (–Ω–µ —Å—Ç—Ä–æ–∫–∞–º–∏!)
    current_time = int(time.time())
    base_date = datetime(2025, 1, 1)
    current_date = datetime.now()
    days_since_base = (current_date - base_date).days
    
    test_data = pd.DataFrame({
        'customer_id': [1001, 1002, 1003],        # –ß–ò–°–õ–û–í–´–ï ID
        'terminal_id': [2001, 2002, 2003],        # –ß–ò–°–õ–û–í–´–ï ID
        'tx_amount': [100.50, 2500.00, 50.0],
        'tx_time_seconds': [current_time, current_time + 3600, current_time + 7200],
        'tx_time_days': [days_since_base, days_since_base, days_since_base + 1],
        'tx_fraud_scenario': [0, 1, 0]  # 0 = normal, 1 = fraud scenario
    })
    
    print(f"\nüìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(test_data)
    print(f"\nüìã –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
    print(test_data.dtypes)
    
    print(f"\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...")
    prediction = model.predict(test_data)
    
    print(f"‚úÖ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –£–°–ü–ï–®–ù–û!")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {prediction}")
    print(f"üîß –¢–∏–ø: {type(prediction)}")
    
    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ FRAUD DETECTION:")
    if hasattr(prediction, '__len__') and len(prediction) > 0:
        for i, (idx, row) in enumerate(test_data.iterrows()):
            result = prediction[i]
            fraud_status = "üö® FRAUD" if result > 0.5 else "‚úÖ NORMAL"
            confidence = result if result > 0.5 else (1 - result)
            scenario = "fraud scenario" if row['tx_fraud_scenario'] == 1 else "normal scenario"
            print(f"   üë§ Customer {row['customer_id']}: ${row['tx_amount']:.2f} ({scenario}) ‚Üí {fraud_status} (score: {result:.3f})")
    else:
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {prediction}")
    
    print(f"\nüéâ –ú–û–î–ï–õ–¨ –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–ê–ï–¢!")
    print(f"‚úÖ –ì–æ—Ç–æ–≤–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ REST API")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –¥–ª—è API
    print(f"\nüìã –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–•–ï–ú–ê –î–õ–Ø REST API:")
    api_schema = {
        'customer_id': 'integer (—á–∏—Å–ª–æ–≤–æ–π ID –∫–ª–∏–µ–Ω—Ç–∞)',
        'terminal_id': 'integer (—á–∏—Å–ª–æ–≤–æ–π ID —Ç–µ—Ä–º–∏–Ω–∞–ª–∞)',  
        'tx_amount': 'float (—Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)',
        'tx_time_seconds': 'integer (timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)',
        'tx_time_days': 'integer (–¥–Ω–∏ —Å –±–∞–∑–æ–≤–æ–π –¥–∞—Ç—ã)',
        'tx_fraud_scenario': 'integer (0=normal, 1=fraud scenario)'
    }
    
    for i, (field, description) in enumerate(api_schema.items(), 1):
        print(f"   {i}. {field}: {description}")
    
    print(f"\nüíæ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:")
    print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ MLflow: http://mlflow.darveter.com")
    print(f"‚úÖ –ö—ç—à–∏—Ä—É–µ—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
    print(f"‚úÖ –î–µ–ª–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è fraud detection")
    print(f"‚ùå –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (Spark ML –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)")
    print(f"üîß –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É API!")
    
    print(f"\nüöÄ –ò–¢–ï–†–ê–¶–ò–Ø 1 –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"üéØ –ì–æ—Ç–æ–≤—ã –∫ –ò—Ç–µ—Ä–∞—Ü–∏–∏ 2: REST API –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()