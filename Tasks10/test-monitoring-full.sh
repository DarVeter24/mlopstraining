#!/bin/bash

echo "üß™ Tasks10 ML API - –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
echo "============================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
check_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
        return 1
    fi
}

echo ""
echo -e "${BLUE}1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API${NC}"
echo "-----------------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
echo "üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º /health endpoint..."
health_response=$(curl -s -w "%{http_code}" http://localhost:8000/health -o /tmp/health.json)
check_result $? "Health endpoint –¥–æ—Å—Ç—É–ø–µ–Ω"

if [ "$health_response" = "200" ]; then
    echo "üìä Health response:"
    cat /tmp/health.json | jq '.'
else
    echo -e "${RED}‚ùå Health endpoint –≤–µ—Ä–Ω—É–ª –∫–æ–¥: $health_response${NC}"
fi

echo ""
echo -e "${BLUE}2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö${NC}"
echo "-----------------------------"

echo "üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 20 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤..."
for i in {1..20}; do
    response=$(curl -s -X POST http://localhost:8000/predict \
        -H "Content-Type: application/json" \
        -d '{
            "transaction_id": "test-'$i'",
            "customer_id": '$((RANDOM % 1000))',
            "terminal_id": '$((RANDOM % 100))',
            "tx_amount": '$((RANDOM % 1000 + 10))',
            "tx_time_seconds": 1693737600,
            "tx_time_days": 19723,
            "tx_fraud_scenario": 0
        }')
    
    if [ $((i % 5)) -eq 0 ]; then
        echo "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ $i/20 –∑–∞–ø—Ä–æ—Å–æ–≤"
    fi
    sleep 0.5
done

echo -e "${GREEN}‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ 20 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π${NC}"

echo ""
echo -e "${BLUE}3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –≤ API${NC}"
echo "-------------------------"

echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π..."
predictions_metric=$(curl -s http://localhost:8000/metrics | grep "ml_model_predictions_total{" | head -1)
echo "–ú–µ—Ç—Ä–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: $predictions_metric"

echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –º–µ—Ç—Ä–∏–∫–∏..."
http_metric=$(curl -s http://localhost:8000/metrics | grep "http_requests_total{" | grep "predict" | head -1)
echo "HTTP –º–µ—Ç—Ä–∏–∫–∞: $http_metric"

echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏..."
memory_metric=$(curl -s http://localhost:8000/metrics | grep "ml_model_memory_usage_bytes" | head -1)
echo "Memory –º–µ—Ç—Ä–∏–∫–∞: $memory_metric"

echo ""
echo -e "${BLUE}4Ô∏è‚É£ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Prometheus${NC}"
echo "-------------------------------"

echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Prometheus..."
kubectl port-forward svc/prometheus-server 9090:80 -n prometheus &
PROMETHEUS_PID=$!
sleep 5

echo "üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º Prometheus API..."
prom_response=$(curl -s -w "%{http_code}" "http://localhost:9090/api/v1/targets" -o /tmp/targets.json)
if [ "$prom_response" = "200" ]; then
    echo -e "${GREEN}‚úÖ Prometheus API –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à target
    echo "üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º target tasks10-ml-service..."
    tasks10_target=$(cat /tmp/targets.json | jq -r '.data.activeTargets[] | select(.job=="tasks10-ml-service") | .health')
    if [ "$tasks10_target" = "up" ]; then
        echo -e "${GREEN}‚úÖ Tasks10 ML Service target UP –≤ Prometheus${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Tasks10 ML Service target: $tasks10_target${NC}"
    fi
else
    echo -e "${RED}‚ùå Prometheus API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: $prom_response)${NC}"
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º port-forward
kill $PROMETHEUS_PID 2>/dev/null

echo ""
echo -e "${BLUE}5Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Prometheus –º–µ—Ç—Ä–∏–∫–∞–º${NC}"
echo "-------------------------------------"

kubectl port-forward svc/prometheus-server 9090:80 -n prometheus &
PROMETHEUS_PID=$!
sleep 5

echo "üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ ML –º–æ–¥–µ–ª–∏..."
ml_query="ml_model_predictions_total"
ml_response=$(curl -s "http://localhost:9090/api/v1/query?query=$ml_query" | jq -r '.data.result | length')

if [ "$ml_response" -gt "0" ]; then
    echo -e "${GREEN}‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ ML –º–æ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ Prometheus ($ml_response —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è –ú–µ—Ç—Ä–∏–∫–∏ ML –º–æ–¥–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Prometheus${NC}"
fi

echo "üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP –º–µ—Ç—Ä–∏–∫–∏..."
http_query="http_requests_total"
http_response=$(curl -s "http://localhost:9090/api/v1/query?query=$http_query" | jq -r '.data.result | length')

if [ "$http_response" -gt "0" ]; then
    echo -e "${GREEN}‚úÖ HTTP –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ Prometheus ($http_response —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è HTTP –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Prometheus${NC}"
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º port-forward
kill $PROMETHEUS_PID 2>/dev/null

echo ""
echo -e "${BLUE}6Ô∏è‚É£ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Grafana${NC}"
echo "----------------------------"

echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Grafana..."
kubectl port-forward svc/grafana 3000:80 -n grafana &
GRAFANA_PID=$!
sleep 5

grafana_response=$(curl -s -w "%{http_code}" "http://localhost:3000/api/health" -o /tmp/grafana.json)
if [ "$grafana_response" = "200" ]; then
    echo -e "${GREEN}‚úÖ Grafana –¥–æ—Å—Ç—É–ø–Ω–∞${NC}"
else
    echo -e "${RED}‚ùå Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–∫–æ–¥: $grafana_response)${NC}"
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º port-forward
kill $GRAFANA_PID 2>/dev/null

echo ""
echo -e "${BLUE}7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ HPA –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è${NC}"
echo "--------------------------------"

echo "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å HPA..."
kubectl get hpa -n mlops-tasks10

echo "üìä –¢–µ–∫—É—â–∏–µ –ø–æ–¥—ã..."
kubectl get pods -n mlops-tasks10 -l app=tasks10-ml-api

echo ""
echo -e "${BLUE}8Ô∏è‚É£ –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è HPA${NC}"
echo "-----------------------------"

echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç (50 –∑–∞–ø—Ä–æ—Å–æ–≤)..."
for i in {1..50}; do
    curl -s -X POST http://localhost:8000/predict \
        -H "Content-Type: application/json" \
        -d '{
            "transaction_id": "load-'$i'",
            "customer_id": '$((RANDOM % 1000))',
            "terminal_id": '$((RANDOM % 100))',
            "tx_amount": '$((RANDOM % 2000 + 100))',
            "tx_time_seconds": 1693737600,
            "tx_time_days": 19723,
            "tx_fraud_scenario": 0
        }' > /dev/null &
    
    if [ $((i % 10)) -eq 0 ]; then
        echo "üî• –ó–∞–ø—É—â–µ–Ω–æ $i/50 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
    fi
done

echo "‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤..."
wait

echo ""
echo "üìä –°—Ç–∞—Ç—É—Å HPA –ø–æ—Å–ª–µ –Ω–∞–≥—Ä—É–∑–∫–∏:"
kubectl get hpa -n mlops-tasks10

echo "üìä –ü–æ–¥—ã –ø–æ—Å–ª–µ –Ω–∞–≥—Ä—É–∑–∫–∏:"
kubectl get pods -n mlops-tasks10 -l app=tasks10-ml-api

echo ""
echo -e "${BLUE}9Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫${NC}"
echo "-----------------------------"

echo "üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ API:"
echo "Predictions total:"
curl -s http://localhost:8000/metrics | grep "ml_model_predictions_total{" || echo "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

echo "HTTP requests total:"
curl -s http://localhost:8000/metrics | grep "http_requests_total{.*predict" || echo "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

echo "Memory usage:"
curl -s http://localhost:8000/metrics | grep "ml_model_memory_usage_bytes" || echo "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

echo ""
echo "============================================="
echo -e "${GREEN}‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!${NC}"
echo "============================================="

echo ""
echo -e "${YELLOW}üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Grafana –¥–∞—à–±–æ—Ä–¥: http://localhost:3000"
echo "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Prometheus: http://localhost:9090"
echo "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Escalating Attack –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤"
echo ""
echo -e "${BLUE}üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ Escalating Attack:${NC}"
echo "cd dag && python -c 'from kafka_attack_producer import run_escalating_attack; run_escalating_attack()'"
