name: Tasks9 MLOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'Tasks9/**'  # –ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ Tasks9
      - '.github/workflows/tasks9-ci.yml'  # –ò –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–∞–º–æ–≥–æ workflow
  pull_request:
    branches: [ main ]
    paths: 
      - 'Tasks9/**'
      - '.github/workflows/tasks9-ci.yml'
  workflow_dispatch: # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/tasks9-fraud-detection-api

jobs:
  # –≠—Ç–∞–ø 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    
    defaults:
      run:
        working-directory: ./Tasks9  # –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ Tasks9/
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-tasks9-${{ hashFiles('Tasks9/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-tasks9-
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx
        
    - name: Create test environment file
      run: |
        cp env-example .env
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        echo "ENVIRONMENT=test" >> .env
        echo "DEBUG=true" >> .env
        echo "LOG_LEVEL=DEBUG" >> .env
        
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v3
      with:
        file: ./Tasks9/coverage.xml
        flags: unittests
        name: codecov-tasks9

  # –≠—Ç–∞–ø 2: –õ–∏–Ω—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Tasks9
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        
    - name: Run Black (code formatter)
      run: black --check --diff src/ tests/
      
    - name: Run isort (import sorter)
      run: isort --check-only --diff src/ tests/
      
    - name: Run flake8 (linter)
      run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
      
    - name: Run mypy (type checker)
      run: mypy src/ --ignore-missing-imports --no-strict-optional

  # –≠—Ç–∞–ø 3: –°–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞
  docker-test:
    runs-on: ubuntu-latest
    needs: [test, lint]
    defaults:
      run:
        working-directory: ./Tasks9
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image for testing
      uses: docker/build-push-action@v5
      with:
        context: ./Tasks9  # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±–æ—Ä–∫–∏ –≤ Tasks9/
        push: false
        tags: tasks9-fraud-detection-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        docker run -d -p 8000:8000 --name tasks9-test-container \
          -e ENVIRONMENT=test \
          -e DEBUG=true \
          -e LOG_LEVEL=INFO \
          tasks9-fraud-detection-api:test python -m src.api_simple
          
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        sleep 10
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º predict endpoint
        curl -f -X POST http://localhost:8000/predict \
          -H "Content-Type: application/json" \
          -d '{"transaction_id":"ci_test","customer_id":1,"terminal_id":1,"tx_amount":100,"tx_time_seconds":1705312200,"tx_time_days":19723,"tx_fraud_scenario":0}' || exit 1
          
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        docker stop tasks9-test-container

  # –≠—Ç–∞–ø 4: –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–∑–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏)
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, lint, docker-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=tasks9-{{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./Tasks9
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Generate deployment artifact
      run: |
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–µ–ø–ª–æ–µ
        mkdir -p deployment
        echo "IMAGE_TAG=${{ steps.meta.outputs.tags }}" > deployment/tasks9-image-info.env
        echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> deployment/tasks9-image-info.env
        echo "GIT_SHA=${{ github.sha }}" >> deployment/tasks9-image-info.env
        echo "PROJECT=Tasks9" >> deployment/tasks9-image-info.env
        
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: tasks9-deployment-info
        path: deployment/

  # –≠—Ç–∞–ø 5: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–µ–ø–ª–æ–µ
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always() && github.ref == 'refs/heads/main'
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build-and-push.result }}" == "success" ]; then
          echo "‚úÖ Tasks9 Deployment successful! Image pushed to registry."
          echo "üöÄ Tasks9 Ready for ArgoCD sync"
          echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        else
          echo "‚ùå Tasks9 Deployment failed!"
          exit 1
        fi
